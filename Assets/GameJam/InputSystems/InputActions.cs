//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/GameJam/InputSystems/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""CharacterControls"",
            ""id"": ""395e4a40-3479-484d-b7be-ba55fdae961f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""194a1233-a4e7-48c0-9e4c-dfac1560f20d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""975fc2b2-060c-4ce2-9495-4c8aa59e1f8d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""6a0d1077-abd9-47b1-944d-9bcca7f7b0af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Climb"",
                    ""type"": ""Button"",
                    ""id"": ""cf804012-a03b-40dd-94f9-a19414a30750"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ViewControl"",
                    ""type"": ""PassThrough"",
                    ""id"": ""575d24c0-0326-400f-ad27-89651e6ae7fe"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""331e3ee7-bf36-4b81-95dd-4b53d9be770a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9dd39ac2-7efd-460e-bef4-4e6568e65e34"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""304729a1-1f69-4cfb-94ef-dc399cbb009e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bb046ede-8c87-43b4-9fba-067589b253a9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ddfb3e9f-28c8-4a3a-b064-49e37cc0fc0e"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76a20ac0-e7af-44d2-aba9-b242d2ad210b"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e58f8870-e4f8-4772-b2c3-05209feec590"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b43f2576-f6ed-49fc-bed1-a46a97a6d1e2"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f4a4a66-236f-48b6-9348-bf259fefa23e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Climb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e41ca74-07a6-4c43-923f-cf3a972b9f02"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Climb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ca391fb-f0f8-4138-a131-6f490823a277"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ViewControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8294e7bf-070d-4e8f-85c4-b1d0deb53693"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ViewControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BrickControl"",
            ""id"": ""9ff0b4e2-cf33-4f0a-bdc1-fd92a6146f18"",
            ""actions"": [
                {
                    ""name"": ""BrickLeft"",
                    ""type"": ""Button"",
                    ""id"": ""731801b1-862a-43d0-b915-5a9617d519af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BrickRight"",
                    ""type"": ""Button"",
                    ""id"": ""634334f6-da0e-4791-b11e-dde09f81a84a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BrickDrop"",
                    ""type"": ""Button"",
                    ""id"": ""386fa300-07cb-495b-921c-a01728e98619"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BrickRotate"",
                    ""type"": ""Button"",
                    ""id"": ""a9c6c2e5-e79e-49e0-bc1b-cadf5a01a127"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ResetAnything"",
                    ""type"": ""Button"",
                    ""id"": ""8bb57e0f-5aff-4676-bc3c-735cb2d8f37d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""42cc4ab3-cd66-47fb-ab79-51ce19f29681"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BrickLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5971b5ca-a50b-41da-b68e-13914a79cdcb"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BrickRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af82cebf-7a6b-479c-b239-08902a7454de"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BrickDrop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b207d08b-3b10-4908-a94a-2e574b80303e"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BrickRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67bcbec3-18fe-444d-9d9e-22119b390cbf"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ResetAnything"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterControls
        m_CharacterControls = asset.FindActionMap("CharacterControls", throwIfNotFound: true);
        m_CharacterControls_Move = m_CharacterControls.FindAction("Move", throwIfNotFound: true);
        m_CharacterControls_Run = m_CharacterControls.FindAction("Run", throwIfNotFound: true);
        m_CharacterControls_Crouch = m_CharacterControls.FindAction("Crouch", throwIfNotFound: true);
        m_CharacterControls_Climb = m_CharacterControls.FindAction("Climb", throwIfNotFound: true);
        m_CharacterControls_ViewControl = m_CharacterControls.FindAction("ViewControl", throwIfNotFound: true);
        // BrickControl
        m_BrickControl = asset.FindActionMap("BrickControl", throwIfNotFound: true);
        m_BrickControl_BrickLeft = m_BrickControl.FindAction("BrickLeft", throwIfNotFound: true);
        m_BrickControl_BrickRight = m_BrickControl.FindAction("BrickRight", throwIfNotFound: true);
        m_BrickControl_BrickDrop = m_BrickControl.FindAction("BrickDrop", throwIfNotFound: true);
        m_BrickControl_BrickRotate = m_BrickControl.FindAction("BrickRotate", throwIfNotFound: true);
        m_BrickControl_ResetAnything = m_BrickControl.FindAction("ResetAnything", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterControls
    private readonly InputActionMap m_CharacterControls;
    private List<ICharacterControlsActions> m_CharacterControlsActionsCallbackInterfaces = new List<ICharacterControlsActions>();
    private readonly InputAction m_CharacterControls_Move;
    private readonly InputAction m_CharacterControls_Run;
    private readonly InputAction m_CharacterControls_Crouch;
    private readonly InputAction m_CharacterControls_Climb;
    private readonly InputAction m_CharacterControls_ViewControl;
    public struct CharacterControlsActions
    {
        private @InputActions m_Wrapper;
        public CharacterControlsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CharacterControls_Move;
        public InputAction @Run => m_Wrapper.m_CharacterControls_Run;
        public InputAction @Crouch => m_Wrapper.m_CharacterControls_Crouch;
        public InputAction @Climb => m_Wrapper.m_CharacterControls_Climb;
        public InputAction @ViewControl => m_Wrapper.m_CharacterControls_ViewControl;
        public InputActionMap Get() { return m_Wrapper.m_CharacterControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterControlsActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @Climb.started += instance.OnClimb;
            @Climb.performed += instance.OnClimb;
            @Climb.canceled += instance.OnClimb;
            @ViewControl.started += instance.OnViewControl;
            @ViewControl.performed += instance.OnViewControl;
            @ViewControl.canceled += instance.OnViewControl;
        }

        private void UnregisterCallbacks(ICharacterControlsActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @Climb.started -= instance.OnClimb;
            @Climb.performed -= instance.OnClimb;
            @Climb.canceled -= instance.OnClimb;
            @ViewControl.started -= instance.OnViewControl;
            @ViewControl.performed -= instance.OnViewControl;
            @ViewControl.canceled -= instance.OnViewControl;
        }

        public void RemoveCallbacks(ICharacterControlsActions instance)
        {
            if (m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterControlsActions @CharacterControls => new CharacterControlsActions(this);

    // BrickControl
    private readonly InputActionMap m_BrickControl;
    private List<IBrickControlActions> m_BrickControlActionsCallbackInterfaces = new List<IBrickControlActions>();
    private readonly InputAction m_BrickControl_BrickLeft;
    private readonly InputAction m_BrickControl_BrickRight;
    private readonly InputAction m_BrickControl_BrickDrop;
    private readonly InputAction m_BrickControl_BrickRotate;
    private readonly InputAction m_BrickControl_ResetAnything;
    public struct BrickControlActions
    {
        private @InputActions m_Wrapper;
        public BrickControlActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @BrickLeft => m_Wrapper.m_BrickControl_BrickLeft;
        public InputAction @BrickRight => m_Wrapper.m_BrickControl_BrickRight;
        public InputAction @BrickDrop => m_Wrapper.m_BrickControl_BrickDrop;
        public InputAction @BrickRotate => m_Wrapper.m_BrickControl_BrickRotate;
        public InputAction @ResetAnything => m_Wrapper.m_BrickControl_ResetAnything;
        public InputActionMap Get() { return m_Wrapper.m_BrickControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BrickControlActions set) { return set.Get(); }
        public void AddCallbacks(IBrickControlActions instance)
        {
            if (instance == null || m_Wrapper.m_BrickControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BrickControlActionsCallbackInterfaces.Add(instance);
            @BrickLeft.started += instance.OnBrickLeft;
            @BrickLeft.performed += instance.OnBrickLeft;
            @BrickLeft.canceled += instance.OnBrickLeft;
            @BrickRight.started += instance.OnBrickRight;
            @BrickRight.performed += instance.OnBrickRight;
            @BrickRight.canceled += instance.OnBrickRight;
            @BrickDrop.started += instance.OnBrickDrop;
            @BrickDrop.performed += instance.OnBrickDrop;
            @BrickDrop.canceled += instance.OnBrickDrop;
            @BrickRotate.started += instance.OnBrickRotate;
            @BrickRotate.performed += instance.OnBrickRotate;
            @BrickRotate.canceled += instance.OnBrickRotate;
            @ResetAnything.started += instance.OnResetAnything;
            @ResetAnything.performed += instance.OnResetAnything;
            @ResetAnything.canceled += instance.OnResetAnything;
        }

        private void UnregisterCallbacks(IBrickControlActions instance)
        {
            @BrickLeft.started -= instance.OnBrickLeft;
            @BrickLeft.performed -= instance.OnBrickLeft;
            @BrickLeft.canceled -= instance.OnBrickLeft;
            @BrickRight.started -= instance.OnBrickRight;
            @BrickRight.performed -= instance.OnBrickRight;
            @BrickRight.canceled -= instance.OnBrickRight;
            @BrickDrop.started -= instance.OnBrickDrop;
            @BrickDrop.performed -= instance.OnBrickDrop;
            @BrickDrop.canceled -= instance.OnBrickDrop;
            @BrickRotate.started -= instance.OnBrickRotate;
            @BrickRotate.performed -= instance.OnBrickRotate;
            @BrickRotate.canceled -= instance.OnBrickRotate;
            @ResetAnything.started -= instance.OnResetAnything;
            @ResetAnything.performed -= instance.OnResetAnything;
            @ResetAnything.canceled -= instance.OnResetAnything;
        }

        public void RemoveCallbacks(IBrickControlActions instance)
        {
            if (m_Wrapper.m_BrickControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBrickControlActions instance)
        {
            foreach (var item in m_Wrapper.m_BrickControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BrickControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BrickControlActions @BrickControl => new BrickControlActions(this);
    public interface ICharacterControlsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnClimb(InputAction.CallbackContext context);
        void OnViewControl(InputAction.CallbackContext context);
    }
    public interface IBrickControlActions
    {
        void OnBrickLeft(InputAction.CallbackContext context);
        void OnBrickRight(InputAction.CallbackContext context);
        void OnBrickDrop(InputAction.CallbackContext context);
        void OnBrickRotate(InputAction.CallbackContext context);
        void OnResetAnything(InputAction.CallbackContext context);
    }
}
